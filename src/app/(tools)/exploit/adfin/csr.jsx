"use client";
import BtnSubmit from "@/components/button/btnSubmit";
import CardTools from "@/components/card/cardTools";
import * as Uil from "@iconscout/react-unicons";
import { useEffect, useState, useRef } from "react";

function CSR() {
  const [target, setTarget] = useState("");
  const [customPaths, setCustomPaths] = useState("");
  const [loading, setLoading] = useState(false);
  const [isDisabled, setIsDisabled] = useState(true);
  const [results, setResults] = useState(null);
  const [error, setError] = useState(null);
  const resultRef = useRef(null);

  useEffect(() => {
    const isValid = target.trim() !== "";

    setIsDisabled(!isValid);
  }, [target, customPaths]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setIsDisabled(true);
    setResults(null);
    setError(null);

    const response = await fetch("/api/find-admin", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ target, customPaths: customPaths.split("\n") }),
    });

    const data = await response.json();
    if (response.ok) {
      setResults(data.data);
    } else {
      setError(data.error);
    }
    setLoading(false);
    setIsDisabled(false);
    resultRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  return (
    <CardTools title="Admin Finder" description="Find admin login or admin dashboard with Admin Finder.">
      <form onSubmit={handleSubmit} className="flex flex-col gap-4 p-1 md:p-4 w-full">
        <div className="form-control w-full">
          <label className="input input-bordered flex items-center gap-2 w-full">
            <Uil.UilLinkH size="16px" className={`h-4 w-4 opacity-70 ${loading && "cursor-not-allowed"}`} />
            <input type="text" className="grow w-full" id="target" name="target" value={target} onChange={(e) => setTarget(e.target.value)} required placeholder="https://localhost/" readOnly={loading} />
          </label>
        </div>

        <div className="form-control">
          <label className="label">
            <span className="label-text text-sm">Custom Path:</span>
            <span className="label-text-alt text-sm">{customPaths.split("\n").length}</span>
          </label>
          <textarea className={`textarea textarea-bordered h-40 resize-y ${loading && "cursor-not-allowed"}`} placeholder="Custom Path" value={customPaths} onChange={(e) => setCustomPaths(e.target.value)} readOnly={loading} />
        </div>
        <BtnSubmit loading={loading} isDisabled={isDisabled} innerText={"GO!"} />
      </form>
      <div className="divider my-0" ref={resultRef}></div>
      {error && <span className="w-full text-error">{error}</span>}
      {results && (
        <div className="overflow-x-auto">
          <table className="table table-zebra w-full">
            <thead className="w-full">
              <tr className="w-full">
                <th>Status</th>
                <th>Link</th>
              </tr>
            </thead>
            <tbody className="w-full">
              {results.map((result, index) => (
                <tr key={index} className="w-full">
                  <th className={`text-base-content ${[404, "Timeout", "Failed"].includes(result.status) ? "text-error" : "text-success"}`}>{result.status}</th>
                  <td>
                    <a href={result.link} className="underline hover:no-underline break-all" target="_blank" rel="noreferrer">
                      {result.link}
                    </a>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </CardTools>
  );
}

export default CSR;
