"use client";
import CardTools from "@/components/card/cardTools";
import BtnSubmit from "@/components/button/btnSubmit";
import * as Uil from "@iconscout/react-unicons";
import { useState, useEffect, useRef } from "react";

function CSR() {
  const [state, setState] = useState({
    target: "",
    command: "",
  });
  const [loading, setLoading] = useState(false);
  const [isDisabled, setIsDisabled] = useState(true);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const resultRef = useRef(null);

  useEffect(() => {
    const isValid = state.target !== "" && state.target.includes("py.alfa") && (state.target.startsWith("https://") || state.target.startsWith("http://")) && state.command !== "";

    setIsDisabled(!isValid);
  }, [state]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setIsDisabled(true);
    setResult(null);
    setError(null);

    const response = await fetch("/api/alfa-rce", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(state),
    });

    const data = await response.json();
    if (response.ok) {
      setResult(data.data);
    } else {
      setError(data.error);
    }
    setLoading(false);
    setIsDisabled(false);
    resultRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  return (
    <CardTools title="Py.alfa RCE" description="Tools for automated exploit py.alfa from ALFA Team Shell.">
      <form onSubmit={handleSubmit} className="flex flex-col gap-4 w-full p-1 md:p-4">
        <label className="input input-bordered flex items-center gap-2 w-full">
          <Uil.UilLinkH size="16px" className="h-4 w-4 opacity-70" />
          <input
            type="text"
            className={`grow w-full ${loading && "cursor-not-allowed"}`}
            id="target"
            name="target"
            value={state.target}
            readOnly={loading}
            onChange={(e) => setState({ ...state, target: e.target.value })}
            required
            placeholder="https://localhost/"
          />
        </label>
        <label className="form-control w-full">
          <div className="label">
            <span className="label-text">Command:</span>
          </div>
          <input
            type="text"
            placeholder="Command, E.g. uname -a"
            className={`input input-bordered w-full ${loading && "cursor-not-allowed"}`}
            readOnly={loading}
            required
            value={state.command}
            onChange={(e) => setState({ ...state, command: e.target.value })}
          />
        </label>
        <BtnSubmit loading={loading} isDisabled={isDisabled} innerText="Execute" />
      </form>
      <div className="divider my-0" ref={resultRef}></div>
      {error && <span className="w-full text-error">{error}</span>}
      {result && (
        <label className="form-control w-full">
          <div className="label">
            <span className="label-text">Result:</span>
            <span className="label-text-alt text-sm">{result.length}</span>
          </div>
          <textarea className="textarea textarea-bordered h-80 resize-y" placeholder="Result" value={result} readOnly></textarea>
        </label>
      )}
    </CardTools>
  );
}

export default CSR;
